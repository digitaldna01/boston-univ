<!DOCTYPE html>
<!-- saved from url=(0076)http://www.cs.bu.edu/courses/cs111/midterm2_info.html#preparing-for-the-exam -->
<html class="gr__cs_bu_edu"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Midterm 2 Information — CS 111, Boston University</title>

<meta name="description" content="Course website for CS 111, Boston University.">
<link rel="stylesheet" href="./Midterm 2 Information — CS 111, Boston University_files/style.css">
<link rel="icon" type="image/x-icon" href="http://www.cs.bu.edu/courses/cs111/img/favicon.ico">
<link rel="mask-icon" href="http://www.cs.bu.edu/courses/cs111/img/111.svg" color="#cc0000">
<script src="./Midterm 2 Information — CS 111, Boston University_files/respond.min.js"></script>
<script src="./Midterm 2 Information — CS 111, Boston University_files/html5shiv.js"></script>
<script src="./Midterm 2 Information — CS 111, Boston University_files/cs111.js"></script>
<meta name="viewport" content="width=device-width, user-scalable=yes">
<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="expires" content="-1">
</head>

<body onload="setup();" data-gr-c-s-loaded="true">

<div id="left">
<a id="header" href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#" class="backtotop">↑</a>
<div id="subheader">
Fall 2018
</div>

<nav>
<ul>
    <li><a href="http://www.cs.bu.edu/courses/cs111/index.html">Home</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/files/syllabus.pdf">Syllabus</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/schedule.html">Schedule</a></li>
    <li><a href="https://learn.bu.edu/">Lectures</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/labs/">Labs</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/problem_sets/">Problem Sets</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/staff.html">Staff</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/office_hours.html">Office Hours</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/resources.html">Resources</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/collaboration.html">Collaboration</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/policies.html">Policies</a></li>
</ul>
<ul class="external">
    <li><a href="https://learn.bu.edu/">Blackboard</a></li>
    <li><a href="http://www.cs.hmc.edu/csforall" target="_blank"><i>CS for All</i></a></li>
    <li><a href="http://pythontutor.com/visualize.html#py=3" target="_blank">Python Tutor</a></li>    
    <li><a href="https://piazza.com/bu/fall2018/cs111" target="_blank">Piazza</a></li>
    <li><a href="http://www.cs.bu.edu/courses/cs111/apollo" target="_blank">Apollo</a></li>
</ul>
</nav>

</div><!-- end #left -->

<div id="middle">
<section class="main">
<!---
<div class="admonition note">
<p class="admonition-title">Old version</p>
<p>This is the CS 111 site as it appeared on December 21, 2016.</p>
</div>
--->
<h1>Midterm 2 Information</h1>
<div class="toc" style="display: none;">
<ul>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#material-covered">Material covered</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#exam-details">Exam details</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#preparing-for-the-exam">Preparing for the exam</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#additional-practice-problems">Additional practice problems</a></li>
</ul>
</div>
<h2 id="material-covered">Material covered</h2>
<p>The exam will focus on the topics covered in lecture from the material
on gates and circuits up to and including the material on
references. The use of the stack and recursion in the context of
assembly language will <strong><em>not</em></strong> be included on the exam.</p>
<p>Remember that you can access all of the relevant pre-lecture videos and 
lecture notes in the <em>Lectures</em> section of the course’s Blackboard site.</p>
<h2 id="exam-details">Exam details</h2>
<ul>
<li>
<p>The exam will be held from 6:30-7:30 p.m. on Wednesday, November 14, 
  in the following locations:</p>
<ul>
<li>A1 lecture (MWF 10:10-11:00): <ul>
<li>students with last names A-M: <a href="http://www.bu.edu/maps/?id=111">COM</a> 101</li>
<li>students with last names N-Z: <a href="http://www.bu.edu/maps/?id=751">KCB</a> 101 (note the change)</li>
</ul>
</li>
<li>B1 lecture (MWF 12:20-1:10): <ul>
<li>students with last names A-Q: <a href="http://www.bu.edu/maps/?id=772">SCI</a> 109</li>
<li>students with last names R-Z: <a href="http://www.bu.edu/maps/?id=755">LSE</a> B01</li>
</ul>
</li>
<li>C1 lecture (TuTh 11:00-12:15): <ul>
<li>students with last names A-U: <a href="http://www.bu.edu/maps/?id=783">STO</a> B50</li>
<li>students with last names V-Z: <a href="http://www.bu.edu/maps/?id=751">KCB</a> 101 (note the change)</li>
</ul>
</li>
<li>students with special accommodations: <a href="http://www.bu.edu/maps/?id=757">MCS</a> B08 (note the change)</li>
</ul>
</li>
<li>
<p>The A1 and B1 sections <strong><em>will</em></strong> meet for lecture on the day of the
  midterm.</p>
</li>
<li>
<p><strong><em>You must bring your BU ID to the exam, so that we can check it
  when you turn in your exam.</em></strong></p>
</li>
<li>
<p>You will have the full 60 minutes for the exam.  </p>
</li>
<li>
<p><strong>We will provide a page with the full list of Hmmm instructions
  that you can use during the exam.</strong></p>
</li>
<li>
<p>You may <em>not</em> use any other materials during the exam. In
  particular, you should turn off and put away cell phones, watches, 
  and other devices.</p>
</li>
<li>
<p>The exam will include questions similar to the ones posed in 
  lecture–both the Top Hat questions and the open-response ones. 
  However, these questions will <em>not</em> be multiple-choice. You will 
  need to determine and write the answer without a list of options 
  to choose from.</p>
</li>
<li>
<p>In addition, there will be questions that ask you to write a
  function, a short program, or a simple circuit, similar to the
  problems from the homework.</p>
</li>
</ul>
<h2 id="preparing-for-the-exam">Preparing for the exam</h2>
<ul>
<li>
<p>One way to prepare is to review the pre-lecture materials and lecture 
    notes and make a summary of the key points in your own words. 
    “Boiling down” the material in this way is a great way to ensure that 
    you really understand the key concepts.</p>
</li>
<li>
<p>We also encourage you to do practice problems. Options include:</p>
<ul>
<li>
<p>redoing the questions posed in lecture–both the clicker questions
    and the open-response ones. The online lecture notes 
    include both the questions and–on the next slide–the answers.</p>
</li>
<li>
<p>the practice problems found below
    (<strong>Note:</strong> Solutions to these additional practice problems will
    be posted under <em>Other Content</em> on Blackboard as we get closer 
    to the exam.)</p>
</li>
<li>
<p>the following questions from <a href="http://codingbat.com/python">CodingBat</a>:</p>
<ul>
<li>any question from <a href="http://codingbat.com/python/Warmup-2">Warmup-2</a> </li>
<li>any question from <a href="http://codingbat.com/python/String-2">String-2</a> </li>
<li>any question from <a href="http://codingbat.com/python/List-2">List-2</a></li>
</ul>
<p><em>Note:</em> Some of these questions refer to an <em>array</em>, which is 
another name for a list.</p>
</li>
</ul>
<p>When working on practice problems, try to come up with your
answers <em>on paper</em>, rather than through a trial-and-error approach
on IDLE or in another programming environment. This will be give
you an experience that is similar to the one that you will have
during the exam.</p>
</li>
<li>
<p>Feel free to post questions on Piazza (using the <code>midterm_exam2</code>
  tag) or to email the course account (<code>cs111-staff@cs.bu.edu</code>).</p>
</li>
</ul>
<h2 id="additional-practice-problems">Additional practice problems</h2>
<p><em><strong>Solutions</strong> to these problems will be posted under</em> Other Content <em>on 
Blackboard as we get closer to the exam.</em></p>
<ol>
<li>
<p>Write the complete truth table for the boolean function 
    X<font style="text-decoration: overline;">Y</font>Z +
      <font style="text-decoration: overline;">X</font>Y<font style="text-decoration: overline;">Z</font>.</p>
</li>
<li>
<p>Given the following truth table, perform the minterm expansion for the
    function <code>f</code>. Don’t simplify! </p>
<div class="codehilite"><pre><span class="gh">x  y   f(x,y)</span>
<span class="gh">-------------</span>
0  0      1
0  1      0
1  0      1
1  1      0
</pre></div>


</li>
<li>
<p>Design the circuit for the function from the previous problem.</p>
</li>
<li>
<p>Add the following two binary numbers:</p>
<div class="codehilite"><pre>   1 1 0 1
 1 0 1 1 1
----------
</pre></div>


</li>
<li>
<p>Multiply the following two binary numbers:</p>
<div class="codehilite"><pre>   1 0 1 1
 1 1 1 0 1
----------
</pre></div>


</li>
<li>
<p>Design a truth table, minterm formula, and circuit that will
    implement a 2-bit greater-than function. Your function should take
    4 bits of input, <code>x<sub>1</sub></code>,
    <code>x<sub>0</sub></code>, <code>y<sub>1</sub></code> and
    <code>y<sub>0</sub></code>, and produce a true output if and only
    if the two-bit number
    <code>x<sub>1</sub></code><code>x<sub>0</sub></code> is greater
    than the two-bit number
    <code>y<sub>1</sub></code><code>y<sub>0</sub></code>.</p>
</li>
<li>
<p>Write a Hmmm assembly-language program that gets two positive
    integers from the user, subtracts the second integer from the
    first, and writes out the square of the result.</p>
</li>
<li>
<p>Write a Hmmm assembly-language program that uses a loop to 
    allow the user to enter one or more integers. When the user
    enters a zero, the program should stop looping and write out two
    counts: how many of the numbers were positive, and how many were
    negative. Don’t count the zero.</p>
</li>
<li>
<p>Write a Hmmm assembly language program that reads a positive
    integer <code>n</code> from the user and calls a separate function <code>n</code> 
    times. The function should simply write out the number 111. You
    must use <code>call</code> and <code>jumpr</code> instructions to implement your
    function.</p>
</li>
<li>
<p>Write a Python function <code>years_needed</code> that takes 
    three inputs:</p>
<ul>
<li><code>principal</code>, which is the initial amount of money deposited in an 
    interest-bearing account</li>
<li><code>rate</code>, which is the annual interest rate in decimal form</li>
<li><code>target</code>, which is the final value that the investor wants
    to reach</li>
</ul>
<p>The function should use a loop to determine the number of years
of compounded annual interest that are needed for the investment 
to reach or exceed the specified <code>target</code>. <em>Note:</em> After each year,
the new principal is computed as</p>
<div class="codehilite"><pre>principal = principal * (1 + rate)
</pre></div>


</li>
<li>
<p>Write a Python function <code>count_vowels(s)</code> that counts and returns
    the number of vowels in a string. Use a loop.</p>
</li>
<li>
<p>Write a Python function <code>stars(n)</code> where <code>n</code> is a positive integer.
    It should print <code>n</code> lines of stars with 1 star on first line, 2 stars 
    on second line, and so forth. For example, <code>stars(4)</code> should print</p>
<div class="codehilite"><pre>*
**
***
****
</pre></div>


<p>Use nested loops. You are <em>not</em> allowed to use the <code>*</code> operator (*). 
You should use <code>print('*', end= '')</code> to print a single asterisk
at a time while remaining on the same line, and an empty <code>print()</code>
to go down to the next line.</p>
</li>
<li>
<p>Write a function <code>all_perfect(lst)</code> that takes a list of numbers
    <code>lst</code> and returns <code>True</code> if all of the numbers are 100 and <code>False</code>
    otherwise. Use a loop.</p>
</li>
<li>
<p>Write a function <code>index_nearest(n, lst)</code> that takes a number <code>n</code>
    and a list of numbers <code>lst</code> and returns the <em>index</em> of the element
    in <code>lst</code> whose value is closest to <code>n</code>. Use one or more loops.</p>
</li>
<li>
<p>A two-part problem:</p>
<ul>
<li>
<p>First, write a function <code>num_appearances(substring, s)</code> that 
    returns the number of appearances of the specified <code>substring</code>
    (which you may assume is of length 2) in the string <code>s</code>.
    <em>Hint:</em> Use an index-based loop.</p>
</li>
<li>
<p>Next, write a function <code>most_common_pair(s)</code> that returns the
    two-character string in <code>s</code> that appears most often as a
    substring within <code>s</code>.  For example,
    <code>most_common_pair('alphabetical')</code> should return <code>al</code>. Ties
    may be broken arbitrarily. <em>Hint:</em> Use <code>num_appearances</code> as a
    helper function. In addition, <code>most_common_pair</code> will need its
    own index-based loop.</p>
</li>
</ul>
</li>
<li>
<p><em>Optional challenge:</em> Write a function
    <a href="http://codingbat.com/prob/p248425?parent=/home/kzhao@bu.edu"><code>longest_dna(s)</code></a> that takes a string <code>s</code> and
    returns the longest substring that consists only of the characters
    ‘A’, ‘C’, ‘G’, and ‘T’. For example,</p>
<div class="codehilite"><pre><span class="n">longest_dna</span><span class="p">(</span><span class="s">'ACCGXXCXXGTTACTGGGCXTTGT'</span><span class="p">)</span>
</pre></div>


<p>should return <code>'GTTACTGGGC'</code>. Ties may be broken arbitrarily. </p>
</li>
<li>
<p>What is printed by the following Python program?</p>
<div class="codehilite"><pre>def loopy(x, y):
    print('starting loopy:', x, y)
    while x &lt; y:
        x += 1
        y -= 2
    print('after loop:', x, y)
    return x

x = 1
y = 8
y = loopy(x, y)
print('after first call:', x, y)
loopy(y, x)
print('after second call:', x, y)
</pre></div>


<p><em>Hint:</em> Use two different tables – one for the global scope and one
for <code>loopy</code> – to keep track of the values of the variables.</p>
</li>
<li>
<p>Draw one or more memory diagram like the ones we have used in lecture
    to illustrate the execution of the following Python program:</p>
<div class="codehilite"><pre>a = [1, 2, 3, 4]
b = a
a[3] = 5
b[1] = 7
print('a is', a)
print('b is', b)
</pre></div>


<p>In addition, write a few sentences that refer to your diagram(s) and
that explain the result of the program.</p>
</li>
<li>
<p>Draw memory diagrams that demonstrate why we get different results
    from the following two Python programs:</p>
<div class="codehilite"><pre>### Program 1 ###
def foo(a):
    a = 2 * a
    return

b = [1, 2, 3]
for i in range(len(b)):
    foo(b[i])

print('b is', b)

### Program 2 ###
def bar(lst, i):
    lst[i] = 2 * lst[i]
    return

b = [1, 2, 3]
for i in range(len(b)):
    bar(b, i)

print('b is', b)
</pre></div>


<p>In addition, write a few sentences that refer to your diagrams and
that explain the difference in output.</p>
</li>
</ol>
</section>

<footer>
Last modified on November  2, 2018.
</footer>

</div>

<div id="right" style="display: inherit;">
<div class="toc">
<ul>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#material-covered" class="">Material covered</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#exam-details" class="">Exam details</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#preparing-for-the-exam">Preparing for the exam</a></li>
<li><a href="http://www.cs.bu.edu/courses/cs111/midterm2_info.html#additional-practice-problems" class="current">Additional practice problems</a></li>
</ul>
</div></div>




</body></html>